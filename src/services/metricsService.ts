// src/services/metricsService.ts
'use server';

import type { LucideIcon } from "lucide-react";
import { 
  DollarSign, 
  UserPlus, 
  Repeat, 
  Database,
  FileUp,
  Lightbulb,
  FilePlus2,
  Users
} from "lucide-react";
import type { StatCardProps } from "@/components/dashboard/StatCard";
import type { InsightCardProps } from "@/components/dashboard/InsightCard";
import type { DataSourceCardProps } from "@/components/dashboard/DataSourceCard";

// In a real application, this data would be fetched from a database (e.g., Firestore).
// These functions simulate that data fetching process.

// --- Mock Data ---

const mockStats: StatCardProps[] = [
  { title: "Monthly Sales", value: "$45,231.89", icon: DollarSign, change: "+20.1%", changeType: "increase" as const },
  { title: "New Users", value: "+1,234", icon: UserPlus, change: "+15.2%", changeType: "increase" as const },
  { title: "Recurring Users", value: "8,765", icon: Repeat, change: "-1.2%", changeType: "decrease" as const },
  { title: "Data Sources", value: "12", icon: Database, change: "+2", changeType: "increase" as const },
];

const mockActivity = [
  {
    id: "act1",
    user: { name: "Alice" },
    action: "uploaded a new data source",
    target: "Q4 Sales Report.csv",
    time: "5m ago",
    icon: FileUp,
  },
  {
    id: "act2",
    user: { name: "AI Assistant" },
    action: "generated a new insight about",
    target: "User Engagement Trends",
    time: "30m ago",
    icon: Lightbulb,
  },
  {
    id: "act3",
    user: { name: "Bob" },
    action: "created a new report",
    target: "Weekly Marketing KPIs",
    time: "2h ago",
    icon: FilePlus2,
  },
  {
    id: "act4",
    user: { name: "Alice" },
    action: "added 3 new team members",
    target: "",
    time: "1d ago",
    icon: Users,
  },
];

const mockDataSources: DataSourceCardProps[] = [
  { id: "ds1", name: "Sales Q3 Data", type: "File", freshness: "Updated 5 mins ago", rowCount: 150234, schemaSummary: "12 columns, 3 indexed", status: "ok" },
  { id: "ds2", name: "Customer Database", type: "Database", freshness: "Syncing...", rowCount: 87650, schemaSummary: "25 columns, 8 indexed", status: "syncing" },
  { id: "ds3", name: "Marketing API", type: "API", freshness: "Last checked 1 day ago", rowCount: 500000, schemaSummary: "8 fields", status: "error" },
];

const mockInsights: InsightCardProps[] = [
  {
    id: "in1",
    title: "User Engagement Drops",
    description: "Weekly active users dropped by 8% in the last week. The steepest decline was seen on mobile devices.",
    chartType: "line",
    chartData: [
      { name: "W1", value: 550 },
      { name: "W2", value: 575 },
      { name: "W3", value: 520 },
      { name: "W4", value: 480 },
    ],
    chartConfig: {
        value: { label: "Active Users", color: "hsl(var(--chart-2))" }
    }
  },
  {
    id: "in2",
    title: "Marketing Campaign ROI",
    description: "The 'Summer Sale' campaign shows a 25% higher ROI compared to 'Social Media Ads'.",
    chartType: "bar",
    chartData: [
        { name: "Summer", value: 1.8 },
        { name: "Social", value: 1.2 },
        { name: "Email", value: 1.5 },
    ],
    chartConfig: {
        value: { label: "ROI", color: "hsl(var(--chart-1))" }
    }
  },
  {
    id: "in3",
    title: "Top Product Categories",
    description: "Electronics and Apparel make up 65% of all sales this month.",
    chartType: "pie",
    chartData: [
        { name: 'Electronics', value: 400, fill: 'hsl(var(--chart-1))' },
        { name: 'Apparel', value: 250, fill: 'hsl(var(--chart-2))' },
        { name: 'Home', value: 150, fill: 'hsl(var(--chart-3))' },
        { name: 'Other', value: 200, fill: 'hsl(var(--chart-4))' },
    ],
    chartConfig: {
        value: { label: 'Sales' },
        Electronics: { label: 'Electronics' },
        Apparel: { label: 'Apparel' },
        Home: { label: 'Home Goods' },
        Other: { label: 'Other' },
    }
  },
  {
    id: "in4",
    title: "Customer Churn Risk Alert",
    description: "A segment of 50 users who have not logged in for 30 days has been identified as high risk for churn. Consider a re-engagement campaign.",
  },
];


// --- Service Functions ---

/**
 * Fetches high-level statistics for the main dashboard.
 * In a real app, this would query aggregated data.
 */
export async function getDashboardStats() {
  // Simulate network delay
  await new Promise(resolve => setTimeout(resolve, 500));
  return mockStats;
}

/**
 * Fetches the most recent activity across the platform.
 */
export async function getRecentActivity() {
  await new Promise(resolve => setTimeout(resolve, 500));
  return mockActivity;
}

/**
 * Fetches the latest insights generated by the AI or users.
 */
export async function getLatestInsights() {
  await new Promise(resolve => setTimeout(resolve, 500));
  return mockInsights;
}

/**
 * Fetches a summary of the user's data sources.
 */
export async function getDataSourcesSummary() {
  await new Promise(resolve => setTimeout(resolve, 500));
  return mockDataSources;
}
